"""
Django settings for another_django_practice_project project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# import os
import pymysql
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default="your_default_secret_key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="").split(",")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'another_django_practice_project',
    'user',
    'article',
    'blog',
    # For Using Django-Allauth (OAuth)
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # Example for Google OAuth
    'rest_framework',   # For RESTful APIs
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # For Using Django-Allauth (OAuth)
    'article.custom_middlewares.CustomHeaderMiddleware',    # All responses now include the X-Custom-Header.
    'article.custom_middlewares.LogRequestMethodMiddleware',    # A middleware that logs the request method.
    'article.custom_middlewares.CacheControlMiddleware',    # A middleware that adds Cache-Control headers.
    'article.custom_middlewares.ExceptionLoggingMiddleware',    # A middleware to log exceptions and return a custom error response.
    'article.custom_middlewares.ViewLoggingMiddleware',    # Log the name of the view being accessed.
    'article.custom_middlewares.TemplateVariableMiddleware',    # Add a variable to the template context.
]

ROOT_URLCONF = 'another_django_practice_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],         # Leave this empty for app-specific templates
        'APP_DIRS': True,   # Enable discovery of templates in app directories
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'another_django_practice_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# import pymysql
pymysql.install_as_MySQLdb()

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DATABASE_NAME'),
        'USER': config('DATABASE_USER'),
        'PASSWORD': config('DATABASE_PASSWORD'),
        'HOST': 'localhost',  # Or the MySQL server's address
        'PORT': '3306',       # Default MySQL port
        'OPTIONS': {
            'sql_mode': 'STRICT_TRANS_TABLES',  # Enforce stricter validation
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Configuration for sending emails
# # EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'  # Or your SMTP provider
# EMAIL_PORT = 587  # Port for TLS
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'ramandhiman1322@gmail.com'
# EMAIL_HOST_PASSWORD = 'Raman@80539'
# EMAIL_TIMEOUT = 5  # Optional: Set a timeout for SMTP connections

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'ramandhiman1322@gmail.com'


# MESSAGE_STORAGE configuration
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

LOGIN_URL = '/login/'  # Update to the URL path of your login view
APPEND_SLASH = True   # If you want Django to automatically append slashes to URLs


# For Using a Custom User Model
AUTH_USER_MODEL = 'user.CustomUser'

ACCOUNT_EMAIL_REQUIRED = True   # Ensures that the email field is mandatory for user signup and login.
ACCOUNT_USERNAME_REQUIRED = False   # Disables the username field since you are using email as the primary identifier.
ACCOUNT_AUTHENTICATION_METHOD = 'email'   # Configures Django Allauth to use email for authentication instead of a username.

# Set the ACCOUNT_USER_MODEL_USERNAME_FIELD to None since your CustomUser model does not use a username field.
ACCOUNT_USER_MODEL_USERNAME_FIELD = None


# Allauth uses the user_display function to render a user's display name.
# You can override this function by adding a callable that specifies how the user should be displayed
def account_user_display(user):
    return f"{user.first_name} {user.last_name} ({user.email})"


ACCOUNT_USER_DISPLAY = account_user_display

# Add your custom backend in settings.py for Using an Alternative Model for Authentication
AUTHENTICATION_BACKENDS = [
    'user.backends.CustomAuthBackend',  # Custom backend
    'django.contrib.auth.backends.ModelBackend',  # Default backend
    'allauth.account.auth_backends.AuthenticationBackend',  # for user authentication using OAuth
]

# Add this to define the site ID for your app
SITE_ID = 1  # Make sure this is set correctly

# # Social Account settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config("GOOGLE_CLIENT_ID")  # <Your Google Client ID>
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config("GOOGLE_CLIENT_SECRET")    # <Your Google Client Secret>

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.SessionAuthentication',
#         'rest_framework.authentication.TokenAuthentication',
#     ],
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ],
# }


# This allows you to access the CSRF token in Postman.
CSRF_COOKIE_HTTPONLY = False  # Set to False to allow JavaScript to read the CSRF cookie

# Add the following settings for redirecting users after login/logout:
LOGIN_REDIRECT_URL = '/welcome'
LOGOUT_REDIRECT_URL = '/'

# Log Errors: Add CELERY_TASK_ALWAYS_EAGER = True in settings.py during development to run tasks synchronously and debug issues.
CELERY_TASK_ALWAYS_EAGER = True

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'


# For SendGris Email Integration Services
# # EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'
# # SENDGRID_API_KEY = 'your_api_key'
# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# EMAIL_HOST = "smtp.sendgrid.net"
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = "apikey"  # This is the literal value "apikey".
# EMAIL_HOST_PASSWORD = config("SENDGRID_API_KEY")  # Replace with your actual API key.
# DEFAULT_FROM_EMAIL = "ramandhiman1322@gmail.com"  # Replace with your email.
